{"version":3,"sources":["App.module.css","Button.tsx","Counter.tsx","Input.tsx","SettingBlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","className","s","button","onClick","onClickButton","disabled","name","Counter","container","editMode","errorMax","errorStart","number","maxValue","startValue","error","maxNumber","buttons","inc","reset","Input","spanAndInput","text","input","errorInput","type","value","onChange","SettingBlock","e","valueMax","currentTarget","valueAsNumber","setEditMode","setMaxValue","setErrorMax","setErrorStart","valueStart","setStartValue","setNumber","App","useState","useEffect","maxNewValue","localStorage","getItem","startNewValue","JSON","parse","setItem","stringify","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec350c1a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1ASXm\",\"container\":\"App_container___eohb\",\"number\":\"App_number__2EE35\",\"buttons\":\"App_buttons__2C-Uu\",\"button\":\"App_button__3jTzw\",\"maxNumber\":\"App_maxNumber__2miTr\",\"input\":\"App_input__3DFGW\",\"error\":\"App_error__1sMoN\",\"errorInput\":\"App_errorInput__1m5FJ\",\"editMode\":\"App_editMode__cminM\",\"spanAndInput\":\"App_spanAndInput__1OONk\"};","import s from './App.module.css';\r\nimport React from 'react';\r\n\r\nexport type ButtonType = {\r\n    name: string\r\n    disabled: boolean\r\n    onClickButton: () => void\r\n}\r\n\r\nexport function Button(props: ButtonType) {\r\n    return (\r\n        <div>\r\n            <button\r\n                className={s.button}\r\n                onClick={props.onClickButton}\r\n                disabled={props.disabled}\r\n            >\r\n                {props.name}\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './App.module.css';\r\nimport {Button} from './Button';\r\n\r\nexport type CounterType = {\r\n    inc: () => void\r\n    reset: () => void\r\n    number: number\r\n    maxValue: number\r\n    startValue: number\r\n    errorMax: boolean\r\n    errorStart: boolean\r\n    editMode: boolean\r\n}\r\n\r\nexport function Counter(props: CounterType) {\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <span>\r\n                {\r\n                    props.editMode && !props.errorMax && !props.errorStart\r\n                        ? <span className={`${s.number} ${s.editMode}`}>enter values and press set</span>\r\n                        : props.errorMax || props.errorStart || props.number < 0 || props.maxValue <= props.startValue\r\n                        ? <span className={`${s.number} ${s.error}`}>Incorrect value!</span>\r\n                        : !props.editMode && !props.errorMax && !props.errorStart\r\n                            ? <span\r\n                                className={props.number === props.maxValue ? `${s.number} ${s.maxNumber}` : `${s.number}`}>{props.number} </span>\r\n                            : null\r\n                }\r\n            </span>\r\n\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'inc'}\r\n                    disabled={props.number === props.maxValue || props.editMode}\r\n                    onClickButton={props.inc}\r\n                />\r\n                <Button\r\n                    name={'reset'}\r\n                    disabled={!props.number || props.errorStart || props.errorMax}\r\n                    onClickButton={props.reset}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import s from './App.module.css';\r\nimport React, {ChangeEvent} from 'react';\r\n\r\nexport type InputType = {\r\n    error: boolean\r\n    value: number\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    text: string\r\n}\r\n\r\nexport function Input(props: InputType) {\r\n\r\n    return (\r\n        <div className={s.spanAndInput}>\r\n            <span className={s.editMode}>{props.text}</span>\r\n            <input\r\n                className={props.error ? `${s.input} ${s.errorInput}` : s.input}\r\n                type=\"number\"\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport s from './App.module.css';\r\nimport {Button} from './Button';\r\nimport {Input} from './Input';\r\n\r\nexport type SettingBlockType = {\r\n    setNumber: (number: number) => void\r\n    startValue: number\r\n    setStartValue: (value: number) => void\r\n    maxValue: number\r\n    setMaxValue: (value: number) => void\r\n    errorMax: boolean\r\n    setErrorMax: (errorMax: boolean) => void\r\n    errorStart: boolean\r\n    setErrorStart: (errorStart: boolean) => void\r\n    editMode: boolean\r\n    setEditMode: (editMode: boolean) => void\r\n}\r\n\r\nexport function SettingBlock(props: SettingBlockType) {\r\n\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const valueMax = e.currentTarget.valueAsNumber\r\n        props.setEditMode(true)\r\n        props.setMaxValue(valueMax)\r\n        if (valueMax <= props.startValue) {\r\n            props.setErrorMax(true)\r\n            props.setErrorStart(true)\r\n        } else if (valueMax < 0) {\r\n            props.setErrorMax(true)\r\n            props.setErrorStart(false)\r\n        } else if (valueMax < 0 && props.startValue === 0) {\r\n            props.setErrorMax(true)\r\n            props.setErrorStart(false)\r\n        } else {\r\n            props.setErrorMax(false)\r\n            props.setErrorStart(false)\r\n        }\r\n    }\r\n\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const valueStart = e.currentTarget.valueAsNumber\r\n        props.setEditMode(true)\r\n        props.setStartValue(valueStart)\r\n        if (valueStart >= props.maxValue) {\r\n            props.setErrorStart(true)\r\n            props.setErrorMax(true)\r\n        } else if (valueStart < 0) {\r\n            props.setErrorStart(true)\r\n            props.setErrorMax(false)\r\n        } else if (valueStart < 0 && props.maxValue === 0) {\r\n            props.setErrorStart(true)\r\n            props.setErrorMax(false)\r\n        } else {\r\n            props.setErrorStart(false)\r\n            props.setErrorMax(false)\r\n        }\r\n    }\r\n\r\n    const onClickButtonSet = () => {\r\n        props.setNumber(props.startValue)\r\n        props.setEditMode(!props.editMode)\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.number}>\r\n                <div className={s.input}>\r\n                    <Input\r\n                        error={props.errorMax || props.maxValue <= props.startValue}\r\n                        value={props.maxValue}\r\n                        onChange={onChangeMaxValue}\r\n                        text={'max value:'}\r\n                    />\r\n                    <Input\r\n                        error={props.errorStart || props.startValue >= props.maxValue || props.startValue < 0}\r\n                        value={props.startValue}\r\n                        onChange={onChangeStartValue}\r\n                        text={'start value:'}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'set'}\r\n                    disabled={props.errorMax || props.errorStart || props.startValue < 0 || props.startValue >= props.maxValue}\r\n                    onClickButton={onClickButtonSet}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Counter} from './Counter';\r\nimport s from './App.module.css'\r\nimport {SettingBlock} from './SettingBlock';\r\n\r\nfunction App() {\r\n    const [number, setNumber] = useState(0)\r\n    const [startValue, setStartValue] = useState(0)\r\n    const [maxValue, setMaxValue] = useState(0)\r\n    const [errorMax, setErrorMax] = useState(false)\r\n    const [errorStart, setErrorStart] = useState(false)\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        let maxNewValue = localStorage.getItem('maxValue')\r\n        let startNewValue = localStorage.getItem('startValue')\r\n        if (maxNewValue) {\r\n            setMaxValue(JSON.parse(maxNewValue))\r\n        }\r\n        if (startNewValue) {\r\n            setStartValue(JSON.parse(startNewValue))\r\n            setNumber(JSON.parse(startNewValue))\r\n        } else {\r\n            setErrorMax(true)\r\n            setErrorStart(true)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\r\n        localStorage.setItem('startValue', JSON.stringify(startValue))\r\n    }, [maxValue, startValue])\r\n\r\n\r\n    const inc = () => {\r\n        setNumber(number + 1)\r\n    }\r\n    const reset = () => {\r\n        setNumber(startValue)\r\n    }\r\n\r\n    return (\r\n        <div className={s.app}>\r\n            <div>\r\n                <SettingBlock\r\n                    setNumber={setNumber}\r\n                    startValue={startValue}\r\n                    setStartValue={setStartValue}\r\n                    maxValue={maxValue}\r\n                    setMaxValue={setMaxValue}\r\n                    errorMax={errorMax}\r\n                    setErrorMax={setErrorMax}\r\n                    errorStart={errorStart}\r\n                    setErrorStart={setErrorStart}\r\n                    editMode={editMode}\r\n                    setEditMode={setEditMode}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Counter\r\n                    inc={inc}\r\n                    reset={reset}\r\n                    number={number}\r\n                    maxValue={maxValue}\r\n                    startValue={startValue}\r\n                    errorMax={errorMax}\r\n                    errorStart={errorStart}\r\n                    editMode={editMode}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}