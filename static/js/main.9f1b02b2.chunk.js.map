{"version":3,"sources":["bll/counter-reducer.ts","reportWebVitals.ts","Button.tsx","CounterDisplay.tsx","Counter.tsx","Input.tsx","bll/store.ts","utils/localStorage-utils.ts","SettingBlock.tsx","App.tsx","index.tsx","App.module.css"],"names":["ACTIONS_TYPE","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Button","React","memo","name","disabled","onClick","className","s","button","initialState","number","minValue","maxValue","error","editMode","greeting","resetNumberAC","type","RESET_NUMBER","setErrorOfValueAC","SET_ERROR_OF_VALUE","setMaxValueAC","value","SET_MAX_VALUE","setMinValueAC","SET_MIN_VALUE","CounterDisplay","useSelector","state","counter","isGreet","enterValue","errorValue","numValue","numValueClassName","maxNumber","Counter","dispatch","useDispatch","inc","useCallback","INC_NUMBER","reset","container","buttons","Input","onChange","text","classNameInput","spanAndInput","span","errorInput","input","rootReducer","combineReducers","action","PRESS_SET","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","window","SettingBlock","onChangeMaxValue","e","currentTarget","valueAsNumber","min","onChangeMinValue","max","App","useEffect","app","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9f1b02b2.chunk.js","sourcesContent":["type IncNumberType = ReturnType<typeof incNumberAC>\r\ntype ResetNumberType = ReturnType<typeof resetNumberAC>\r\ntype SetErrorOfValueType = ReturnType<typeof setErrorOfValueAC>\r\ntype PressSetType = ReturnType<typeof pressSetAC>\r\ntype SetMaxValueType = ReturnType<typeof setMaxValueAC>\r\ntype SetMinValueType = ReturnType<typeof setMinValueAC>\r\n\r\ntype ActionsType =\r\n    IncNumberType\r\n    | ResetNumberType\r\n    | SetErrorOfValueType\r\n    | PressSetType\r\n    | SetMaxValueType\r\n    | SetMinValueType\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport enum ACTIONS_TYPE {\r\n    INC_NUMBER = 'Counter/INC-NUMBER',\r\n    RESET_NUMBER = 'App/Counter/RESET-NUMBER',\r\n    SET_ERROR_OF_VALUE = 'SettingBlock/SET-ERROR-OF-VALUE',\r\n    PRESS_SET = 'SettingBlock/PRESS-SET',\r\n    SET_MAX_VALUE = 'SettingBlock/SET-MAX-VALUE',\r\n    SET_MIN_VALUE = 'SettingBlock/SET-MIN-VALUE',\r\n}\r\n\r\nconst initialState = {\r\n    number: 0,\r\n    minValue: 0,\r\n    maxValue: 0,\r\n    error: false,\r\n    editMode: false,\r\n    greeting: true,\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ACTIONS_TYPE.INC_NUMBER:\r\n            return {\r\n                ...state,\r\n                number: state.number + 1\r\n            }\r\n        case ACTIONS_TYPE.RESET_NUMBER:\r\n            return {\r\n                ...state,\r\n                number: state.minValue\r\n            }\r\n        case ACTIONS_TYPE.SET_ERROR_OF_VALUE:\r\n            return {\r\n                ...state,\r\n                error: true,\r\n            }\r\n        case ACTIONS_TYPE.PRESS_SET:\r\n            return {\r\n                ...state,\r\n                editMode: false,\r\n                number: state.minValue,\r\n            }\r\n        case ACTIONS_TYPE.SET_MAX_VALUE:\r\n            return {\r\n                ...state,\r\n                maxValue: action.value,\r\n                editMode: true,\r\n                greeting: false,\r\n                error: false,\r\n            }\r\n        case ACTIONS_TYPE.SET_MIN_VALUE:\r\n            return {\r\n                ...state,\r\n                minValue: action.value,\r\n                editMode: true,\r\n                greeting: false,\r\n                error: false,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const incNumberAC = () => ({type: ACTIONS_TYPE.INC_NUMBER} as const)\r\nexport const resetNumberAC = () => ({type: ACTIONS_TYPE.RESET_NUMBER} as const)\r\nexport const setErrorOfValueAC = () => ({type: ACTIONS_TYPE.SET_ERROR_OF_VALUE} as const)\r\nexport const pressSetAC = () => ({type: ACTIONS_TYPE.PRESS_SET} as const)\r\nexport const setMaxValueAC = (value: number) => ({type: ACTIONS_TYPE.SET_MAX_VALUE, value} as const)\r\nexport const setMinValueAC = (value: number) => ({type: ACTIONS_TYPE.SET_MIN_VALUE, value} as const)\r\n\r\n\r\n//THUNK\r\n\r\n/*export const incNumberTC = (maxValue: number, minValue: number) => (dispatch: Dispatch) => {\r\n    localStorage.setItem('maxValue', JSON.stringify(maxValue))\r\n    localStorage.setItem('minValue', JSON.stringify(minValue))\r\n    dispatch(incNumberAC())\r\n}\r\n\r\nexport const setValueFromLocalStorageTC = () => (dispatch: Dispatch) => {\r\n    const maxNewValue = localStorage.getItem('maxValue')\r\n    const MINNewValue = localStorage.getItem('minValue')\r\n\r\n    if (maxNewValue) {\r\n        dispatch(setValueFromLocalStorageAC(JSON.parse(maxNewValue)))\r\n        if (JSON.parse(maxNewValue) !== 0) {\r\n            //dispatch(setValueFromLocalStorageAC(false))\r\n        }\r\n    }\r\n    if (MINNewValue) {\r\n        dispatch(setValueFromLocalStorageAC(JSON.parse(MINNewValue)))\r\n        dispatch(setValueFromLocalStorageAC(JSON.parse(MINNewValue)))\r\n        if (JSON.parse(MINNewValue) !== 0) {\r\n            //dispatch(setValueFromLocalStorageAC(false))\r\n        }\r\n    }\r\n}*/\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import s from './App.module.css';\r\nimport React from 'react';\r\n\r\nexport type ButtonType = {\r\n    name: string\r\n    disabled: boolean\r\n    onClick: () => void\r\n}\r\n\r\nexport const Button = React.memo(({name, disabled, onClick}: ButtonType) => {\r\n    return (\r\n        <div>\r\n            <button\r\n                className={s.button}\r\n                onClick={onClick}\r\n                disabled={disabled}\r\n            >\r\n                {name}\r\n            </button>\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport s from './App.module.css';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppStateType} from './bll/store';\r\n\r\n\r\nexport const CounterDisplay = React.memo(() => {\r\n\r\n    const number = useSelector<AppStateType, number>(state => state.counter.number)\r\n    const minValue = useSelector<AppStateType, number>(state => state.counter.minValue)\r\n    const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\r\n    const error = useSelector<AppStateType, boolean>(state => state.counter.error)\r\n    const greeting = useSelector<AppStateType, boolean>(state => state.counter.greeting)\r\n    const editMode = useSelector<AppStateType, boolean>(state => state.counter.editMode)\r\n\r\n\r\n    const isGreet = greeting\r\n    const enterValue = editMode && !error\r\n    const errorValue = error || maxValue <= minValue\r\n    const numValue = !editMode && !error\r\n\r\n    const numValueClassName =\r\n        number === maxValue\r\n            ? `${s.maxNumber}`\r\n            : `${s.number}`\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isGreet ?\r\n                    <span className={s.editMode}>HELLO!<br/>enter values and press 'set'</span>\r\n                    : enterValue ?\r\n                    <span className={s.editMode}>enter values and press set</span>\r\n                    : errorValue ?\r\n                        <span className={s.error}>Incorrect value!</span>\r\n                        : numValue ?\r\n                            <span className={numValueClassName}>{number}</span>\r\n                            : ''\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport s from './App.module.css';\r\nimport {Button} from './Button';\r\nimport {incNumberAC, resetNumberAC} from './bll/counter-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from './bll/store';\r\nimport {CounterDisplay} from './CounterDisplay';\r\n\r\n\r\nexport const Counter = React.memo(() => {\r\n\r\n    const number = useSelector<AppStateType, number>(state => state.counter.number)\r\n    const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\r\n    const error = useSelector<AppStateType, boolean>(state => state.counter.error)\r\n    const editMode = useSelector<AppStateType, boolean>(state => state.counter.editMode)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const inc = useCallback(() => {\r\n        dispatch(incNumberAC())\r\n    }, [dispatch])\r\n\r\n    const reset = useCallback(() => dispatch(resetNumberAC()), [dispatch])\r\n\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <CounterDisplay/>\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'inc'}\r\n                    disabled={number === maxValue || editMode || error}\r\n                    onClick={inc}\r\n                />\r\n                <Button\r\n                    name={'reset'}\r\n                    disabled={!number || error}\r\n                    onClick={reset}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import s from './App.module.css';\r\nimport React, {ChangeEvent} from 'react';\r\n\r\nexport type InputType = {\r\n    value: number\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    text: string\r\n    minValue: number\r\n    maxValue: number\r\n    greeting: boolean\r\n}\r\n\r\nexport const Input = React.memo(({value, onChange, text, minValue, maxValue, greeting}: InputType) => {\r\n\r\n    const classNameInput =\r\n        value < 0\r\n        || minValue >= maxValue\r\n        || maxValue === 0\r\n\r\n\r\n    return (\r\n        <div className={s.spanAndInput}>\r\n            <span className={s.span}>{text}</span>\r\n            <input\r\n                className={classNameInput && !greeting ? s.errorInput : s.input}\r\n                type=\"number\"\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n        </div>\r\n    )\r\n})","import {combineReducers, createStore} from 'redux';\r\nimport {counterReducer} from './counter-reducer';\r\nimport {loadState, saveState} from '../utils/localStorage-utils';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    });\r\n})\r\n\r\nexport type AppStoreType = typeof store\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n//@ts-ignore\r\nwindow.store=store","import {AppStateType} from '../bll/store';\r\n\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport s from './App.module.css';\r\nimport {Button} from './Button';\r\nimport {Input} from './Input';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {pressSetAC, setErrorOfValueAC, setMaxValueAC, setMinValueAC} from './bll/counter-reducer';\r\nimport {AppStateType, store} from './bll/store';\r\n\r\n\r\nexport const SettingBlock = React.memo(() => {\r\n\r\n    const minValue = useSelector<AppStateType, number>(state => state.counter.minValue)\r\n    const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\r\n    const error = useSelector<AppStateType, boolean>(state => state.counter.error)\r\n    const editMode = useSelector<AppStateType, boolean>(state => state.counter.editMode)\r\n    const greeting = useSelector<AppStateType, boolean>(state => state.counter.greeting)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const onChangeMaxValue = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.currentTarget.valueAsNumber\r\n        const min = store.getState().counter.minValue\r\n\r\n        if (value <= min || value <= 0 || min < 0) {\r\n            dispatch(setMaxValueAC(e.currentTarget.valueAsNumber))\r\n            dispatch(setErrorOfValueAC())\r\n        } else {\r\n            dispatch(setMaxValueAC(e.currentTarget.valueAsNumber))\r\n        }\r\n    }, [dispatch])\r\n\r\n\r\n    const onChangeMinValue = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.currentTarget.valueAsNumber\r\n        const max = store.getState().counter.maxValue\r\n\r\n        if (max <= value || max <= 0 || value < 0) {\r\n            dispatch(setMinValueAC(e.currentTarget.valueAsNumber))\r\n            dispatch(setErrorOfValueAC())\r\n        } else {\r\n            dispatch(setMinValueAC(e.currentTarget.valueAsNumber))\r\n        }\r\n    }, [dispatch])\r\n\r\n    const onClick = useCallback(() => {\r\n        dispatch(pressSetAC())\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.number}>\r\n                <div className={s.input}>\r\n                    <Input\r\n                        value={maxValue}\r\n                        onChange={onChangeMaxValue}\r\n                        text={'max value:'}\r\n                        minValue={minValue}\r\n                        maxValue={maxValue}\r\n                        greeting={greeting}\r\n                    />\r\n                    <Input\r\n                        value={minValue}\r\n                        onChange={onChangeMinValue}\r\n                        text={'min value:'}\r\n                        minValue={minValue}\r\n                        maxValue={maxValue}\r\n                        greeting={greeting}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'set'}\r\n                    disabled={error || !editMode}\r\n                    onClick={onClick}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {Counter} from './Counter';\r\nimport s from './App.module.css'\r\nimport {SettingBlock} from './SettingBlock';\r\nimport {useDispatch} from 'react-redux';\r\nimport {resetNumberAC} from './bll/counter-reducer';\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(resetNumberAC())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className={s.app}>\r\n            <div>\r\n                <SettingBlock/>\r\n            </div>\r\n            <div>\r\n                <Counter/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './bll/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1ASXm\",\"container\":\"App_container___eohb\",\"number\":\"App_number__2EE35\",\"buttons\":\"App_buttons__2C-Uu\",\"button\":\"App_button__3jTzw\",\"maxNumber\":\"App_maxNumber__2miTr\",\"input\":\"App_input__3DFGW\",\"error\":\"App_error__1sMoN\",\"errorInput\":\"App_errorInput__1m5FJ\",\"editMode\":\"App_editMode__cminM\",\"span\":\"App_span__3oTY2\",\"spanAndInput\":\"App_spanAndInput__1OONk\"};"],"sourceRoot":""}