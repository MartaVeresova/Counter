{"version":3,"sources":["App.module.css","Button.tsx","Counter.tsx","Input.tsx","SettingBlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","className","s","button","onClick","onClickButton","disabled","name","Counter","enterValue","editMode","error","errorValue","maxValue","startValue","numValue","numValueClassName","number","maxNumber","disabledInc","disabledReset","container","buttons","inc","reset","Input","classNameInput","value","spanAndInput","span","text","input","errorInput","type","onChange","SettingBlock","e","setEditMode","setMaxValue","currentTarget","valueAsNumber","setStartValue","setNumber","App","useState","setError","useEffect","maxNewValue","localStorage","getItem","startNewValue","JSON","parse","setItem","stringify","setErrorOfValue","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62415268.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1ASXm\",\"container\":\"App_container___eohb\",\"number\":\"App_number__2EE35\",\"buttons\":\"App_buttons__2C-Uu\",\"button\":\"App_button__3jTzw\",\"maxNumber\":\"App_maxNumber__2miTr\",\"input\":\"App_input__3DFGW\",\"error\":\"App_error__1sMoN\",\"errorInput\":\"App_errorInput__1m5FJ\",\"editMode\":\"App_editMode__cminM\",\"span\":\"App_span__3oTY2\",\"spanAndInput\":\"App_spanAndInput__1OONk\"};","import s from './App.module.css';\r\nimport React from 'react';\r\n\r\nexport type ButtonType = {\r\n    name: string\r\n    disabled: boolean\r\n    onClickButton: () => void\r\n}\r\n\r\nexport function Button(props: ButtonType) {\r\n    return (\r\n        <div>\r\n            <button\r\n                className={s.button}\r\n                onClick={props.onClickButton}\r\n                disabled={props.disabled}\r\n            >\r\n                {props.name}\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './App.module.css';\r\nimport {Button} from './Button';\r\n\r\nexport type CounterType = {\r\n    inc: () => void\r\n    reset: () => void\r\n    number: number\r\n    maxValue: number\r\n    startValue: number\r\n    error: boolean\r\n    editMode: boolean\r\n}\r\n\r\nexport function Counter(props: CounterType) {\r\n\r\n    // //\r\n    // const testFunc = (editMode, startValue, ............) {\r\n    //     const disabledInc =\r\n    //         props.number === props.maxValue\r\n    //         || editMode\r\n    //         || startValue < 0\r\n    //         || maxValue < 0\r\n    //         || maxValue < startValue\r\n    //\r\n    //     const disabledReset =\r\n    //         !props.number\r\n    //         || errorStart\r\n    //         || errorMax\r\n    //         || startValue < 0\r\n    //         || maxValue < 0\r\n    //         || maxValue <= startValue\r\n    //\r\n    // const 3 =  props.editMode && !props.errorMax && !props.errorStart\r\n    //     return {disabledInc, disabledReset, 3};\r\n    // }\r\n    // const {disabledinc, disabledReset} = testFunc(props.editMode, props.startValue, ............)\r\n\r\n    //const greeting = props.start\r\n\r\n    const enterValue = props.editMode && !props.error\r\n    const errorValue = props.error || props.maxValue <= props.startValue\r\n    const numValue = !props.editMode && !props.error\r\n\r\n    const numValueClassName =\r\n        props.number === props.maxValue ? `${s.maxNumber}` : `${s.number}`\r\n\r\n    const disabledInc =\r\n        props.number === props.maxValue\r\n        || props.editMode\r\n        || props.error\r\n\r\n    const disabledReset =\r\n        !props.number\r\n        || props.error\r\n\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            {\r\n                enterValue\r\n                    ? <span className={s.editMode}>enter values and press set</span>\r\n                    : errorValue\r\n                    ? <span className={s.error}>Incorrect value!</span>\r\n                    : numValue\r\n                        ? <span className={numValueClassName}>{props.number}</span>\r\n                        : ''\r\n            }\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'inc'}\r\n                    disabled={disabledInc}\r\n                    onClickButton={props.inc}\r\n                />\r\n                <Button\r\n                    name={'reset'}\r\n                    disabled={disabledReset}\r\n                    onClickButton={props.reset}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import s from './App.module.css';\r\nimport React, {ChangeEvent} from 'react';\r\n\r\nexport type InputType = {\r\n    value: number\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    text: string\r\n    startValue: number\r\n    maxValue: number\r\n}\r\n\r\nexport function Input(props: InputType) {\r\n\r\n    const classNameInput =\r\n        props.value < 0\r\n        || props.startValue >= props.maxValue\r\n        || props.maxValue === 0\r\n\r\n    return (\r\n        <div className={s.spanAndInput}>\r\n            <span className={s.span}>{props.text}</span>\r\n            <input\r\n                className={classNameInput ? `${s.input} ${s.errorInput}` : s.input}\r\n                type=\"number\"\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, ChangeEventHandler} from 'react';\r\nimport s from './App.module.css';\r\nimport {Button} from './Button';\r\nimport {Input} from './Input';\r\n\r\nexport type SettingBlockType = {\r\n    setNumber: (number: number) => void\r\n    startValue: number\r\n    setStartValue: (value: number) => void\r\n    maxValue: number\r\n    setMaxValue: (value: number) => void\r\n    error: boolean\r\n    setError: (error: boolean) => void\r\n    editMode: boolean\r\n    setEditMode: (editMode: boolean) => void\r\n}\r\n\r\n\r\nexport function SettingBlock(props: SettingBlockType) {\r\n\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setEditMode(true)\r\n        props.setMaxValue(e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setEditMode(true)\r\n        props.setStartValue(e.currentTarget.valueAsNumber)\r\n\r\n    }\r\n\r\n    const onClickButtonSet = () => {\r\n        props.setEditMode(false)\r\n        props.setNumber(props.startValue)\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.number}>\r\n                <div className={s.input}>\r\n                    <Input\r\n                        value={props.maxValue}\r\n                        onChange={onChangeMaxValue}\r\n                        text={'max value:'}\r\n                        startValue={props.startValue}\r\n                        maxValue={props.maxValue}\r\n\r\n                    />\r\n                    <Input\r\n                        value={props.startValue}\r\n                        onChange={onChangeStartValue}\r\n                        text={'start value:'}\r\n                        startValue={props.startValue}\r\n                        maxValue={props.maxValue}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'set'}\r\n                    disabled={props.error}\r\n                    onClickButton={onClickButtonSet}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Counter} from './Counter';\r\nimport s from './App.module.css'\r\nimport {SettingBlock} from './SettingBlock';\r\n\r\nfunction App() {\r\n    const [number, setNumber] = useState(0)\r\n    const [startValue, setStartValue] = useState(0)\r\n    const [maxValue, setMaxValue] = useState(0)\r\n    const [error, setError] = useState(false)\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const maxNewValue = localStorage.getItem('maxValue')\r\n        const startNewValue = localStorage.getItem('startValue')\r\n\r\n        if (maxNewValue) {\r\n            setMaxValue(JSON.parse(maxNewValue))\r\n        }\r\n        if (startNewValue) {\r\n            setStartValue(JSON.parse(startNewValue))\r\n            setNumber(JSON.parse(startNewValue))\r\n        }\r\n        //return;\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\r\n        localStorage.setItem('startValue', JSON.stringify(startValue))\r\n        setErrorOfValue()\r\n    }, [maxValue, startValue])\r\n\r\n\r\n    const inc = () => setNumber(number + 1)\r\n    const reset = () => setNumber(startValue)\r\n\r\n    // early return\r\n    const setErrorOfValue = () => {\r\n        if (maxValue <= startValue) {\r\n            setError(true)\r\n\r\n            return\r\n        }\r\n        if (maxValue < 0 || startValue < 0) {\r\n            setError(true)\r\n\r\n            return\r\n        }\r\n        if (maxValue < 0 && startValue === 0) {\r\n            setError(true)\r\n\r\n            return\r\n        }\r\n        setError(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.app}>\r\n            <div>\r\n                <SettingBlock\r\n                    setNumber={setNumber}\r\n                    startValue={startValue}\r\n                    setStartValue={setStartValue}\r\n                    maxValue={maxValue}\r\n                    setMaxValue={setMaxValue}\r\n                    error={error}\r\n                    setError={setError}\r\n                    editMode={editMode}\r\n                    setEditMode={setEditMode}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Counter\r\n                    inc={inc}\r\n                    reset={reset}\r\n                    number={number}\r\n                    maxValue={maxValue}\r\n                    startValue={startValue}\r\n                    error={error}\r\n                    editMode={editMode}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}